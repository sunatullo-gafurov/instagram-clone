{"version":3,"sources":["components/PostLikes.js","components/AddForm.js","components/CommentLike.js","components/CommentDelete.js","components/Comments.js","components/Post.js","reducers/postReducer.js","components/Wall.js","serviceWorker.js","index.js","App.js"],"names":["PostLikes","props","likes","id","dispatch","liked","setLiked","onClick","type","src","alt","className","AddForm","useState","text","setText","onSubmit","e","preventDefault","placeholder","onChange","target","value","required","CommentLike","postId","commentId","CommentDelete","Comments","comments","map","comment","key","img","Post","onDoubleClick","handleLike","reducer","state","action","post","randomId","Math","floor","random","filter","initialPosts","userId","Wall","useReducer","posts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51c68516.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function PostLikes(props) {\n    const {likes, id, dispatch, liked, setLiked} = props;\n    \n\n    return (\n        <div>\n            {liked ? <span onClick={() => {dispatch({type: 'POST_DISLIKE', id: id}); setLiked(!liked)}}><img src=\"https://www.transparentpng.com/download/instagram-heart/CYXrdl-instagram-heart-hd-photo-png.png\" alt=\"\" className=\"red-heart-post\" /></span> : <span onClick={() => {dispatch({type: 'POST_LIKE', id: id}); setLiked(!liked)}}><img src=\"https://www.transparentpng.com/download/instagram-heart/OtpLVC-heart-shaped-instagram-transparent-image.png\" alt=\"\" className=\"heart-post\" /></span>} <span><img src=\"https://static.thenounproject.com/png/638755-200.png\" alt=\"\" className=\"comment-img\" /></span>\n            <div className=\"post-likes\">{likes} likes</div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\n\nexport default function AddForm(props) {\n    const {id, dispatch} = props;\n    const [text, setText] = useState('')\n    const handleChange = (e) => {\n        setText(e.target.value)\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch({type: 'ADD_COMMENT', id: id, text: text});\n        setText('');\n\n    };\n    return (\n        <div className=\"add-form\">\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Add a comment...\" onChange={handleChange} value={text} required />\n                <button className=\"add-btn\">Post</button>\n            </form>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\nexport default function CommentLike(props) {\n    const {postId, id, likes, dispatch} = props;\n    const [liked, setLiked] = useState(false);\n    return (\n        <div>\n            {liked ? <span><img onClick={() => {dispatch({type: 'COMMENT_DISLIKE', id: postId, commentId: id}); setLiked(!liked)}} src=\"https://www.transparentpng.com/download/instagram-heart/CYXrdl-instagram-heart-hd-photo-png.png\" alt=\"\" className=\"red-heart-comment\" /></span> : <span><img onClick={() => {dispatch({type: 'COMMENT_LIKE', id: postId, commentId: id}); setLiked(!liked)}} src=\"https://www.transparentpng.com/download/instagram-heart/OtpLVC-heart-shaped-instagram-transparent-image.png\" alt=\"\" className=\"heart-comment\" /></span>}\n            <div className=\"comment-like\" >{likes} likes</div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function CommentDelete(props) {\n    const {id, dispatch, postId} = props;\n    return (\n        <div>\n            <button className=\"delete-comment\" onClick={() => dispatch({type: 'DELETE_COMMENT', id: postId, commentId: id})}>Delete</button>\n        </div>\n    )\n}\n","import React from 'react';\nimport AddForm from './AddForm';\nimport CommentLike from './CommentLike';\nimport CommentDelete from './CommentDelete';\n\nexport default function Comments(props) {\n    const {id, comments, dispatch} = props;\n    \n    return (\n        <div className=\"comment-section\">\n            <div >\n                {comments.map(comment => <div key={comment.id} className=\"comment\"><img className=\"comment-image\" src={comment.img} alt=\"\" /> <span className=\"text\">{comment.text}</span>  \n                <CommentLike {...comment} postId={id} dispatch={dispatch} />\n                <CommentDelete {...comment} dispatch={dispatch} postId={id} /></div> )}\n             </div>\n            <AddForm {...props} dispatch={dispatch} />\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport PostLikes from './PostLikes';\nimport Comments from './Comments';\n\nexport default function Post(props) {\n    const {img, id, dispatch} = props;\n    const [liked, setLiked] = useState(false)\n    \n    const handleLike = (id) => {\n        if (liked) {\n            setLiked(!liked)\n            dispatch({type: 'POST_DISLIKE', id: id})\n        } else {\n            setLiked(!liked)\n            dispatch({type: 'POST_LIKE', id: id})\n        }\n    };\n    \n    return (\n        <div className=\"post\">\n            <img className=\"post-img\" onDoubleClick={() => handleLike(id)} src={img} alt=\"\"/>\n            <PostLikes {...props} liked={liked} setLiked={setLiked} />\n            <Comments {...props} />\n        </div>\n    )\n}\n","const reducer = (state, action) => {\n    switch (action.type) {\n        case 'POST_LIKE':\n            return state.map(post => action.id === post.id ? {...post, likes: post.likes + 1} : post);\n        case 'POST_DISLIKE':\n            return state.map(post => action.id === post.id ? {...post, likes: post.likes - 1} : post);\n        case 'COMMENT_LIKE':\n            return state.map(post => {\n                if (action.id === post.id) {\n                    return {...post, comments: post.comments.map(comment => action.commentId === comment.id ? {...comment, likes: comment.likes + 1} : comment)}\n                } else {\n                    return post;\n                }\n            });\n        case 'COMMENT_DISLIKE':\n            return state.map(post => {\n                if (action.id === post.id) {\n                    return {...post, comments: post.comments.map(comment => action.commentId === comment.id ? {...comment, likes: comment.likes - 1} : comment)}\n                } else {\n                    return post;\n                }\n            });\n        case 'ADD_COMMENT':\n            let randomId = Math.floor(Math.random() * 50 + 1);\n            return state.map(post => {\n                if (action.id === post.id) {\n                    return {...post, comments: [...post.comments, {likes: 0, text: action.text, id: randomId, img: 'https://i.pravatar.cc/20?img=' + randomId}]};\n                } else {\n                    return post;\n                }\n                \n            });\n        case 'DELETE_COMMENT':\n            return state.map(post => {\n                if (action.id === post.id) {\n                    return {...post, comments: post.comments.filter(comment => action.commentId !== comment.id)};\n                } else {\n                    return post;\n                }\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React, {useReducer} from 'react';\nimport Post from './Post';\nimport reducer from '../reducers/postReducer';\n\n\n\nconst initialPosts = [\n    {\n        id: 4,\n        userId: 1,\n        img: 'https://i.pravatar.cc/300?img=18',\n        likes: 80,\n        comments: [\n            {id: 1, userId: 3, img: 'https://i.pravatar.cc/20?img=47', likes: 9, text: 'Who are you talking with? :)'},\n            {id: 2, userId: 6, img: 'https://i.pravatar.cc/20?img=42', likes: 5, text: 'Noooo waay'}\n        ]\n    },\n    {\n        id: 3,\n        userId: 1,\n        img: 'https://i.pravatar.cc/300?img=46',\n        likes: 48,\n        comments: [\n            {id: 1, userId: 8, img: 'https://i.pravatar.cc/20?img=14', likes: 3, text: 'Nice pic'},\n            {id: 2, userId: 25, img: 'https://i.pravatar.cc/20?img=6', likes: 6, text: 'Impressive'}\n        ]\n    },\n    {\n        id: 2,\n        userId: 1,\n        img: 'https://i.pravatar.cc/300?img=55',\n        likes: 63,\n        comments: []\n    },\n    {\n        id: 1,\n        userId: 1,\n        img: 'https://i.pravatar.cc/300?img=51',\n        likes: 52,\n        comments: [\n            {id: 1, userId: 3, img: 'https://i.pravatar.cc/20?img=36', likes: 45, text: 'Nice hat'},\n            {id: 2, userId: 6, img: 'https://i.pravatar.cc/20?img=24', likes: 31, text: 'Looking good with this suit'}\n        ],\n    }\n];\n\nexport default function Wall() {\n    const [posts, dispatch] = useReducer(reducer, initialPosts);\n\n    return (\n        <div>\n            {posts.map(post => <Post key={post.id} {...post} dispatch={dispatch} />)}\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Wall from './components/Wall';\nimport './App.css';\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <img className=\"logo\" src=\"https://www.transparentpng.com/download/logo-instagram/g3tCwR-logo-instagram-high-quality-pictures.png\" alt=\"\" />\n            <h2 className=\"title\">𝓘𝓷𝓼𝓽𝓪𝓰𝓻𝓪𝓶</h2>\n            <div className=\"wall\"><Wall /></div>\n        </div>\n    )\n}"],"sourceRoot":""}